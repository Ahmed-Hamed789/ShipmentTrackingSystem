using System.Security.Cryptography;
using System.Text;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using ShipmentTrackingSystem.Data;
using ShipmentTrackingSystem.Filters;
using ShipmentTrackingSystem.Models;

namespace ShipmentTrackingSystem.Controllers
{
    public class UsersController : Controller
    {
        private readonly AppDbContext _db;
        public UsersController(AppDbContext db) => _db = db;

        // الحساب الوحيد المسموح به
        private const string AllowedEmail = "user@demo.local";
        private const string AllowedHash = "3e7c19576488862816f13b512cacf3e4ba97dd97243ea0bd6a2ad1642d86ba72"; // SHA256(User@123)

        [HttpGet]
        public IActionResult Login(string? returnUrl = null)
        { ViewBag.ReturnUrl = returnUrl; return View(); }

        [HttpPost]
        public async Task<IActionResult> Login(string email, string password, string? returnUrl = null)
        {
            email = (email ?? "").Trim().ToLowerInvariant();
            var typedHash = BitConverter.ToString(SHA256.HashData(Encoding.UTF8.GetBytes((password ?? "").Trim())))
                             .Replace("-", "").ToLowerInvariant();

            // ارفض أي إيميل غير الافتراضي
            if (!string.Equals(email, AllowedEmail, StringComparison.OrdinalIgnoreCase))
            {
                ModelState.AddModelError("", "Login is restricted to the demo account only.");
                ViewBag.ReturnUrl = returnUrl;
                return View();
            }
            // ارفض باسورد غير User@123
            if (typedHash != AllowedHash)
            {
                ModelState.AddModelError("", "Invalid email or password.");
                ViewBag.ReturnUrl = returnUrl;
                return View();
            }

            // تأكد أن الحساب موجود في الداتا (لو مش موجود أنشئه/حدّثه)
            var user = await _db.Users.SingleOrDefaultAsync(u => u.Email == AllowedEmail);
            if (user == null)
            {
                user = new AppUser { Email = AllowedEmail, PasswordHash = AllowedHash, FullName = "Demo User" };
                _db.Users.Add(user);
                await _db.SaveChangesAsync();
            }
            else if (user.PasswordHash != AllowedHash)
            {
                user.PasswordHash = AllowedHash;
                await _db.SaveChangesAsync();
            }

            HttpContext.Session.SetInt32("userId", user.Id);
            HttpContext.Session.SetString("userEmail", user.Email);

            if (!string.IsNullOrWhiteSpace(returnUrl)) return Redirect(returnUrl);
            return RedirectToAction(nameof(MyShipments));
        }

        public IActionResult Logout()
        {
            HttpContext.Session.Remove("userId");
            HttpContext.Session.Remove("userEmail");
            return RedirectToAction(nameof(Login));
        }

        [TrackAuthorize]
        public async Task<IActionResult> MyShipments()
        {
            var uid = HttpContext.Session.GetInt32("userId")!.Value;
            var list = await _db.Shipments
                .Include(s => s.Driver)
                .Where(s => s.UserId == uid)
                .OrderByDescending(s => s.Id)
                .ToListAsync();
            return View(list);
        }
    }
}
